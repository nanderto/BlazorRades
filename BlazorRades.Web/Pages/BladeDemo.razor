@page "/BladeDemo"
    <div class="blade-content"
	<h3>BladeDemo</h3>
	<br />
	<h4>@messageText</h4>
	<div class="flex-container">
	  <div style="position:relative;flex-grow: 1">
	    <BladeContainer BladeInfos="@bladeInfos">
	        <Content>
	            @foreach (var bladeInfo in bladeInfos.OrderBy(bi => bi.Order))
	            {
	                if (bladeInfo.Type == typeof(ProcedureAndScoring))
	                {
	                    <ProcedureAndScoring BladeInfos="@bladeInfos"
	                                         Icon="🤴"
	                                         SubTitle="@bladeInfo.SubTitle"
	                                         Id="@bladeInfo.Id"
	                                         Type="@bladeInfo.Type"
	                                         Order="@bladeInfo.Order"
	                                         DeleteThisBlade="@DeleteThisBlade">
	                    </ProcedureAndScoring>
	                }
	                else if (bladeInfo.Type == typeof(CalibrationCasesList))
	                {
	                    <CalibrationCasesList BladeInfos="@bladeInfos"
	                                          Icon="🤴"
	                                          SubTitle="Rate it!! bro"
	                                          Id="@bladeInfo.Id"
	                                          Type="@bladeInfo.Type"
	                                          Order="@bladeInfo.Order"
	                                          DeleteThisBlade="@DeleteThisBlade"
	                                          AddBladeWithId="@AddBladeWithIdAsync">
	                    </CalibrationCasesList>
	                }
	                else if (bladeInfo.Type == typeof(CalibrationCase))
	                {
	                    <CalibrationCasesList BladeInfos="@bladeInfos"
	                                          Icon="🤴"
	                                          SubTitle="Rate it 2 bro !!"
	                                          Id="@bladeInfo.Id"
	                                          Type="@bladeInfo.Type"
	                                          Order="@bladeInfo.Order"
	                                          DeleteThisBlade="@DeleteThisBlade"
	                                          AddBladeWithId="@AddBladeWithIdAsync">
	                    </CalibrationCasesList>
	                }
	                else
	                {
	                    <Blade BladeInfos="@bladeInfos"
	                           Id="@bladeInfo.Id"
	                           Type="@bladeInfo.Type"
	                           Order="@bladeInfo.Order"
	                           Title=@bladeInfo.Title
	                           SubTitle="@bladeInfo.SubTitle"
	                           HeaderButtons="@bladeInfo.HeaderButtons"
	                           Icon="@bladeInfo.Icon"
	                           IconPath="@bladeInfo.IconPath"
	                           SaveButtonPath="@bladeInfo.SaveButtonPath"
	                           DeleteThisBlade="@DeleteThisBlade"
	                           ReFreshRequested="@ReFreshRequested">
	                        @*<TopCommandBars>
	                        @bladeInfo.CommandBars
	                    </TopCommandBars>*@
	                        <Content>
	                            @*@bladeInfo.Content*@
	                            <button type="button" class="btn btn-primary" @onclick="UpdateHeading">
	                                Update heading
	                            </button>
	                            <p>
	                                <h4>The Id of this Blade is @bladeInfo.Id</h4>
	                            </p>
	                            <CommandBar>
	                                @*<button class="blade-command-bar-element-button" id="Add" @onclick="() => AddBladeAsync.InvokeAsync(this.BladeTypeToAdd)">➕</button>*@
	                                <CommandBarButton ButtonLable="Save" Id="SaveID" OnClickEvent=" async () => await AddBladeAsync(typeof(ProcedureAndScoring).FullName)"></CommandBarButton>
	                                <button class="blade-command-bar-element-button" id="Add" @onclick="AddBlade">➕</button>
	                            </CommandBar>
	                        </Content>
	                    </Blade>
	                }
	            }
	        </Content>

            </BladeContainer>
	</div>
    </div>
</div>

@code  {
    List<BladeInfo> bladeInfos;

    protected override void OnInitialized()
    {
        bladeInfos = GetBladeOne();
    }


    public List<BladeInfo> GetBladeOne()
    {
        List<BladeInfo> blades = new List<BladeInfo>();
        blades.Add(new BladeInfo
        {
            Id = "blade1",
            Type= typeof(CalibrationCasesList),
            Order = 1,
            Title = "Calibration Cases",
            SubTitle = "this is blade1",
            HeaderButtons = HeaderButtons.Close,
            Icon = "🧪",
            IconPath = string.Empty,
            SaveButtonPath = string.Empty
        });

        return blades;
    }

    public void UpdateHeading (MouseEventArgs e)
    { }

    private string messageText;

    private void ShowMessage(MouseEventArgs e)
    {
        messageText = "Blaze a new trail with Blazor!";
    }

    private void AddBlade(MouseEventArgs e)
    {
        messageText = "Trying to add a new Procedure and scoring blade";

        int currentCount = bladeInfos.Count;
        int LastInOrder = bladeInfos[currentCount - 1].Order;
        bladeInfos.Add(new BladeInfo
        {
            Id = $"blade{LastInOrder + 1}",
            Type= typeof(ProcedureAndScoring),
            Order = LastInOrder + 1,
        });
    }
    
    private async Task AddBladeAsync(string bladeType)
    {
        messageText = $"Trying to add a new {bladeType} type blade";

        int currentCount = bladeInfos.Count;
        int LastInOrder = bladeInfos[currentCount - 1].Order;
        bladeInfos.Add(new BladeInfo
        {
            Id = $"blade{LastInOrder + 1}",
            Type= typeof(ProcedureAndScoring),
            Order = LastInOrder + 1,
        });
    }

    /// <summary>
    /// Add a blade type with an ID. THis should be changed from using a tuple to using a custom object
    /// I just did this to save the time of creating the object.
    /// </summary>
    /// <param name="parameters"></param>
    /// <returns></returns>
    private async Task AddBladeWithIdAsync(Tuple<Type, string> parameters)
    {
        ///todo Change from tuple to a custom object
        messageText = $"Trying to add a new {parameters.Item1} and scoring blade";

        int currentCount = bladeInfos.Count;
        int LastInOrder = bladeInfos[currentCount - 1].Order;
        bladeInfos.Add(new BladeInfo
        {
            SubTitle = $"the Id passed from the previous blade is {parameters.Item2}",
            Id = $"blade{LastInOrder + 1}",
            Type= typeof(ProcedureAndScoring),
            Order = LastInOrder + 1,
        });
    }


    public void CloseBlade(MouseEventArgs e)
    {
        messageText = "Blaze a new trail with Blazor!";

        //BladeInfos.Remove(BladeInfos[0]);
    }

    public void DeleteThisBlade(string Id)
    {
        bladeInfos.Remove(this.bladeInfos.First(bi => bi.Id == Id));
        StateHasChanged();
    }

    public void ReFreshRequested(string Id)
    {
        StateHasChanged();
    }

     protected override async Task OnInitializedAsync()
     {

         Console.WriteLine($"OnInitializedAsync is being called for BladeDemo");
         System.Diagnostics.Debug.Print($"OnInitializedAsync is being called for BladeDemo");
     }

         protected override async Task OnAfterRenderAsync(bool firstRender)
     {
         Console.WriteLine($"OnAfterRenderAsync is being called for BladeDemo. First render is {firstRender.ToString()}");
         System.Diagnostics.Debug.Print($"OnAfterRenderAsync is being called for BladeDemoCase. First render is {firstRender.ToString()}");
     }
}