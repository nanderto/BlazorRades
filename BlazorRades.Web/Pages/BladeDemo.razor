@page "/BladeDemo"
<h3>BladeDemo</h3>
<br />
<h4>@messageText</h4>
<div class="flex-container">
<div style="position:relative;height:100%;flex-grow: 100">
    <BladeContainer BladeInfos="@bladeInfos">
        @*<CommandBars>
            <button class="blade-command-bar-element-button" @onclick="CloseBlade"> Close</button>
            <button class="blade-command-bar-element-button" @onclick="AddBlade">➕ Add</button>
        </CommandBars>*@
        <Content>
            @foreach (var bladeInfo in bladeInfos.OrderBy(bi => bi.Order))
            {
                if (bladeInfo.Type == typeof(ProcedureAndScoring))
                {
                    <ProcedureAndScoring BladeInfos="@bladeInfos"
                                         Icon="🤴"
                                         Id="@bladeInfo.Id"
                                         Type="@bladeInfo.Type"
                                         Order="@bladeInfo.Order"
                                         DeleteThisBlade="@DeleteThisBlade">
                    </ProcedureAndScoring>
                } else if (bladeInfo.Type == typeof(CalibrationCasesList))
                {
                    <CalibrationCasesList BladeInfos="@bladeInfos"
                                         Icon="🤴"
                                         SubTitle="Rate it!! bro"
                                         Id="@bladeInfo.Id"
                                         Type="@bladeInfo.Type"
                                         Order="@bladeInfo.Order"
                                         DeleteThisBlade="@DeleteThisBlade"
                                         AddBladeWithId="@AddBladeWithIdAsync">
                    </CalibrationCasesList>
                }
                else
                {
                    <Blade BladeInfos="@bladeInfos"
                           Id="@bladeInfo.Id"
                           Type="@bladeInfo.Type"
                           Order="@bladeInfo.Order"
                           Title=@bladeInfo.Title
                           SubTitle="@bladeInfo.SubTitle"
                           HeaderButtons="@bladeInfo.HeaderButtons"
                           Icon="@bladeInfo.Icon"
                           IconPath="@bladeInfo.IconPath"
                           SaveButtonPath="@bladeInfo.SaveButtonPath"
                           DeleteThisBlade="@DeleteThisBlade"
                           ReFreshRequested="@ReFreshRequested">
                        @*<TopCommandBars>
                        @bladeInfo.CommandBars
                    </TopCommandBars>*@
                        <Content>
                            @*@bladeInfo.Content*@
                            <button type="button" class="btn btn-primary" @onclick="UpdateHeading">
                                Update heading
                            </button>
                            <p>
                                <h4>The Id of thi Blade is @bladeInfo.Id</h4>
                            </p>
                            <CommandBar>
                                @*<button class="blade-command-bar-element-button" id="Add" @onclick="() => AddBladeAsync.InvokeAsync(this.BladeTypeToAdd)">➕</button>*@
                                <CommandBarButton ButtonLable="Save" Id="SaveID" OnClickEvent=" async () => await AddBladeAsync(typeof(ProcedureAndScoring).FullName)"></CommandBarButton>
                                <button class="blade-command-bar-element-button" id="Add" @onclick="AddBlade">➕</button>
                            </CommandBar>
                        </Content>
                    </Blade>
                }
            }
        </Content>

    </BladeContainer>
</div>
    </div>

@code  {
    List<BladeInfo> bladeInfos;

    protected override void OnInitialized()
    {
        bladeInfos = GetBladeOne();
    }


    public List<BladeInfo> GetBladeOne()
    {
        List<BladeInfo> blades = new List<BladeInfo>();
        blades.Add(new BladeInfo
        {
            Id = "blade1",
            Type= typeof(CalibrationCasesList),
            Order = 1,
            Title = "Calibration Cases",
            SubTitle = "this is blade1",
            HeaderButtons = HeaderButtons.Close,
            Icon = "🧪",
            IconPath = string.Empty,
            SaveButtonPath = string.Empty
        });

        return blades;
    }

    public void UpdateHeading (MouseEventArgs e)
    { }

    private string messageText;

    private void ShowMessage(MouseEventArgs e)
    {
        messageText = "Blaze a new trail with Blazor!";
    }

    private void AddBlade(MouseEventArgs e)
    {
        messageText = "Trying to add a new Procedure and scoring blade";

        int currentCount = bladeInfos.Count;
        int LastInOrder = bladeInfos[currentCount - 1].Order;
        bladeInfos.Add(new BladeInfo
        {
            Id = $"blade{LastInOrder + 1}",
            Type= typeof(ProcedureAndScoring),
            Order = LastInOrder + 1,
        });
    }

    public EventCallback<string> MyProperty { get; set; }

    private async Task AddBladeAsync(string bladeType)
    {
        messageText = "Trying to add a new Procedure and scoring blade";

        int currentCount = bladeInfos.Count;
        int LastInOrder = bladeInfos[currentCount - 1].Order;
        bladeInfos.Add(new BladeInfo
        {
            Id = $"blade{LastInOrder + 1}",
            Type= typeof(ProcedureAndScoring),
            Order = LastInOrder + 1,
        });
    }

    private async Task AddBladeWithIdAsync(Tuple<string, string> parameters)
    {
        messageText = "Trying to add a new Procedure and scoring blade";

        int currentCount = bladeInfos.Count;
        int LastInOrder = bladeInfos[currentCount - 1].Order;
        bladeInfos.Add(new BladeInfo
        {
            SubTitle = $"the Id passed from the previous blade is {parameters.Item2}",
            Id = $"blade{LastInOrder + 1}",
            Type= typeof(ProcedureAndScoring),
            Order = LastInOrder + 1,
        });
    }


    public void CloseBlade(MouseEventArgs e)
    {
        messageText = "Blaze a new trail with Blazor!";

        //BladeInfos.Remove(BladeInfos[0]);
    }

    public void DeleteThisBlade(string Id)
    {
        bladeInfos.Remove(this.bladeInfos.First(bi => bi.Id == Id));
        StateHasChanged();
    }

    public void ReFreshRequested(string Id)
    {
        StateHasChanged();
    }
}