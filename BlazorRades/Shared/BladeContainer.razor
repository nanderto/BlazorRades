@using BlazorRades.Pages;

<h3>BladeContainer</h3>
<p><b>@messageText</b></p>
@*<div class="flex-container">
    <div style="display:inline-flex;position:relative;flex-grow: 100">*@
        <div class="blade-host-element">
            <div id="stack1" class="blade-stack-element">
                @foreach (var bladeInfo in BladeInfos.OrderBy(bi => bi.Order))
                {
                    if (bladeInfo.Type == typeof(ProcedureAndScoring))
                    {
                        <ProcedureAndScoring BladeInfos="@BladeInfos"
                                Id="@bladeInfo.Id"
                                Type="@bladeInfo.Type"
                                Order="@bladeInfo.Order"                                
                                ReFreshRequested="@ReFreshRequested">
                        </ProcedureAndScoring>
                    }
                    else
                    {
                        <Blade BladeInfos="@BladeInfos"
                                Id="@bladeInfo.Id"
                                Type="@bladeInfo.Type"
                                Order="@bladeInfo.Order"
                                Title=@bladeInfo.Title
                                SubTitle="@bladeInfo.SubTitle"
                                HeaderButtons="@bladeInfo.HeaderButtons"
                                Icon="@bladeInfo.Icon"
                                IconPath="@bladeInfo.IconPath"
                                SaveButtonPath="@bladeInfo.SaveButtonPath"
                                AddBlade="@AddBlade"
                                ReFreshRequested="@ReFreshRequested">
                            <TopCommandBars>
                                @bladeInfo.CommandBars
                            </TopCommandBars>
                            <Content>
                                @bladeInfo.Content
                                <button type="button" class="btn btn-primary" @onclick="UpdateHeading">
                                    Update heading
                                </button>
                                <p>
                                    <h4>The Id of thi Blade is @bladeInfo.Id</h4>
                                </p>
                            </Content>
                        </Blade>
                    }
                }

            </div>
        </div>
    @*</div>*@
@*</div>*@

    @code {
        [Parameter]
        public List<BladeInfo> BladeInfos
        {
            get
            {
                return bladeInfos;
            }

            set
            {
                if (!(value is null))
                {
                    bladeInfos = value;
                }
            }
        }

        private List<BladeInfo> bladeInfos = new List<BladeInfo>();

        /// <summary>
        /// This property is used to set up the initial Content for the first blade
        /// </summary>
        [Parameter]
        public RenderFragment CommandBars
        {
            get { return commandBars; }
            set
            {
                if (value != null)
                {
                    if (value.GetType() == typeof(RenderFragment))
                    {
                        commandBars = value;
                        bladeInfos[0].CommandBars = value;
                    }
                    else
                    {
                        throw new ArgumentException("Value is not a RendorFragment");
                    }
                }
            }
        }

        private RenderFragment commandBars;

        [Parameter]
        public RenderFragment Content
        {
            get { return content; }
            set
            {
                if (value != null)
                {
                    if (value.GetType() == typeof(RenderFragment))
                    {
                        content = value;
                        bladeInfos[0].Content = value;
                    }
                    else
                    {
                        throw new ArgumentException("Value is not a RendorFragment");
                    }
                }
            }
        }

        private RenderFragment content;

        public void UpdateHeading (MouseEventArgs e)
        { }

        private string messageText;

        private void ShowMessage(MouseEventArgs e)
        {
            messageText = "Blaze a new trail with Blazor!";
        }

        private void AddBlade(MouseEventArgs e)
        {
            messageText = "Trying to add a new blade";

            string Id = $"blade{bladeInfos.Count.ToString()}";

            bladeInfos.Add(new BladeInfo
            {
                Id = Id,
                Title = $"this Is the {Id} Title",
                SubTitle = $"this is the {Id} sub-title",
                HeaderButtons = HeaderButtons.SaveAndClose,
                Icon = "🧪",
                IconPath = string.Empty,
                SaveButtonPath = string.Empty

            });
        }

        private void AddBlade2(MouseEventArgs e)
        {
            messageText = "Trying to add a new blade2222";
            bladeInfos.Add(new BladeInfo
            {
                Id = "blade23",
                Title = "this Is My23 Title22",
                SubTitle = "this is the23 sub-title22",
                HeaderButtons = HeaderButtons.Close,
                Icon = "🧪",
                IconPath = string.Empty,
                SaveButtonPath = string.Empty

            });
        }

        public void CloseBlade(MouseEventArgs e)
        {
            messageText = "Blaze a new trail with Blazor!";

            //BladeInfos.Remove(BladeInfos[0]);
        }

        public void ReFreshRequested(string Id)
        {
            BladeInfos.Remove(this.BladeInfos.First(bi => bi.Id == Id));
            StateHasChanged();
        }
    }
