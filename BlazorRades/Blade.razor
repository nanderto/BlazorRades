@using BlazorRades

<div id="@Id" class="blade-blade-element" ref="BlazorRade">
    <header>
        <h2 id="title">@Title</h2>
        @if (!string.IsNullOrEmpty(SubTitle))
        {
            <small id="sub-title">@SubTitle</small>
        }

        @if (!string.IsNullOrEmpty(Icon))
        {
            <div id="icon">@Icon</div>
        }
        else if (!string.IsNullOrEmpty(IconPath))
        {
            <div><img src="@IconPath" /></div>
        }

        @if (HeaderButtons == HeaderButtons.Close)
        {
            <button class="blade-command-bar-element-button" @onclick="() => DeleteThisBlade.InvokeAsync(this.Id)" id="close">X</button>
        }
        else if (HeaderButtons == HeaderButtons.SaveAndClose)
        {
            <button class="blade-command-bar-element-button" id="Save" @onclick="() => SaveBlade.InvokeAsync(this.Id)"><i class="fa fa-floppy-o"></i></button>
            <button class="blade-command-bar-element-button" id="close" @onclick="() => DeleteThisBlade.InvokeAsync(this.Id)">X</button>
        }
        else if (HeaderButtons == HeaderButtons.SaveCloseAndAdd)
        {
            <button class="blade-command-bar-element-button" id="Add" @onclick="() => AddBlade.InvokeAsync(this.BladeTypeToAdd)">➕</button>
            <button class="blade-command-bar-element-button" id="Save" @onclick="() => SaveBlade.InvokeAsync(this.Id)"><i class="fa fa-floppy-o"></i></button>
            <button class="blade-command-bar-element-button" id="close" @onclick="() => DeleteThisBlade.InvokeAsync(this.Id)">X</button>
        }

    </header>
    <div id="bladecontent">
        @ChildContent
    </div>
</div>


@code {

    [Parameter] public List<BladeInfo> BladeInfos { get; set; }

    [Parameter] public Type Type { get; set; }

    [Parameter] public int Order { get; set; }

    [Parameter] public string Id { get; set; }

    [Parameter] public string Icon { get; set; }

    [Parameter] public string IconPath { get; set; }

    [Parameter] public string Title { get; set; }

    [Parameter] public string SubTitle { get; set; }

    [Parameter] public HeaderButtons HeaderButtons { get; set; }
    
    [Parameter] public string SaveButtonPath { get; set; }

    [Parameter] public string CloseButtonPath { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public EventCallback<string> AddBlade { get; set; }

    [Parameter] public string BladeTypeToAdd { get; set; }

    [Parameter] public EventCallback<string> SaveBlade { get; set; }

    /// [Parameter] public Dictionary<string, EventCallback<MouseEventArgs>> CallBackCollection { get; set; }

    [Parameter] public EventCallback<string> ReFreshRequested { get; set; }

    [Parameter] public EventCallback<string> DeleteThisBlade { get; set; }

    ElementReference BlazorRade;
}